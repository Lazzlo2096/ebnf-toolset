source_text		: { description } .
description		: module_declaration
			| udp_declaration
			.
module_declaration	: module_keyword <module>identifier
			  [ list_of_ports ] ';'
			  { module_item } 'endmodule'
			.
module_keyword		: 'module'
			| 'macromodule'
			.
list_of_ports		: '(' port { ',' port } ')' .
port			: [ port_expression ]
			| '.' <port>identifier '(' [ port_expression ] ')'
			.
port_expression		: port_reference
			| '{' port_reference { ',' port_reference } '}'
			.
port_reference		: <port>identifier
			| <port>identifier '[' constant_expression ']'
			| <port>identifier '[' <msb>constant_expression
					   ':' <lsb>constant_expression ']'
			.
module_item		: module_item_declaration
			| parameter_override
			| continuous_assign
			| gate_instantiation
			| udp_instantiation
			| module_instantiation
			| specify_block
			| initial_construct
			| always_construct
			.
module_item_declaration	: parameter_declaration
			| input_declaration
			| output_declaration
			| inout_declaration
			| net_declaration
			| reg_declaration
			| integer_declaration
			| real_declaration
			| time_declaration
			| realtime_declaration
			| event_declaration
			| (+vlog2001 port_direction net_declaration )
			| (+vlog2001 port_direction reg_declaration )
			| (+vlog2001 port_direction integer_declaration )
			| (+vlog2001 port_direction time_declaration )
			| task_declaration
			| function_declaration
			.
parameter_override	: 'defparam' list_of_param_assignments ';' .

parameter_declaration	: 'parameter' list_of_param_assignments ';' 
			| (+vlog2001 'localparam' list_of_param_assignments ';' )
			.
list_of_param_assignments : param_assignment { ',' param_assignment } .
param_assignment	: <parameter>identifier '=' constant_expression .
input_declaration	: 'input' [ range ] list_of_port_identifiers ';' .
output_declaration	: 'output' [ range ] list_of_port_identifiers ';' .
inout_declaration	: 'inout' [ range ] list_of_port_identifiers ';' .
list_of_port_identifiers : <port>identifier { ',' <port>identifier } .
reg_declaration		: 'reg' (+vlog2001 ['signed']) [ range ] list_of_register_identifiers ';' .
time_declaration	: 'time' list_of_register_identifiers ';' .
integer_declaration	: 'integer' list_of_register_identifiers ';' .
real_declaration	: 'real' list_of_real_identifiers ';' .
realtime_declaration	: 'realtime' list_of_real_identifiers ';' .
event_declaration	: 'event' <event>identifier { ',' <event>identifier } ';' .
port_direction		: 'input' | 'output' | 'inout' .
list_of_real_identifiers : <real>identifier { ',' <real>identifier } .
list_of_register_identifiers : register_name { ',' register_name } .
register_name		: <register>identifier
			| <memory>identifier '['
				<upper_limit>constant_expression
				':' <lower_limit>constant_expression ']'
			.
range			: '[' <msb>constant_expression
			  ':' <lsb>constant_expression ']'
			.
net_declaration		: net_type [ 'vectored' | 'scalared' ]
			           (+vlog2001 [ 'signed' ] )
				   [ range ] [ delay3 ]
				   list_of_net_identifiers ';'
			| 'trireg' [ 'vectored' | 'scalared' ]
				   [ charge_strength ]
			           (+vlog2001 [ 'signed' ] )
				   [ range ] [ delay3 ]
				   list_of_net_identifiers ';'
			| net_type [ 'vectored' | 'scalared' ]
				   [ drive_strength ]
			           (+vlog2001 [ 'signed' ] )
				   [ range ] [ delay3 ]
				   list_of_net_decl_assignments ';'
			.
net_type		: 'wire'
			| 'tri'
			| 'tri1'
			| 'supply0'
			| 'wand'
			| 'triand'
			| 'tri0'
			| 'supply1'
			| 'wor'
			| 'trior'
			.
list_of_net_identifiers	: <net>identifier { ',' <net>identifier } .
drive_strength		: '(' strength0 ',' strength1 ')'
			| '(' strength1 ',' strength0 ')'
			| '(' strength0 ',' 'highz1'  ')'
			| '(' strength1 ',' 'highz0'  ')'
			| '(' 'highz1'  ',' strength0 ')'
			| '(' 'highz0'  ',' strength1 ')'
			.
strength0		: 'supply0' | 'strong0' | 'pull0' | 'weak0' .
strength1		: 'supply1' | 'strong1' | 'pull1' | 'weak1' .
charge_strength		: '(' 'small' ')'
			| '(' 'medium' ')'
			| '(' 'large' ')'
			.
delay3			: '#' delay_value
			| '#' '(' delay_value [ ',' delay_value
					      [ ',' delay_value ] ] ')'
			.
delay2			: '#' delay_value
			| '#' '(' delay_value [ ',' delay_value ] ')'
			.
delay_value		: unsigned_number
			| <parameter>identifier
			| constant_mintypmax_expression
			.
list_of_net_decl_assignments : net_decl_assignment { ',' net_decl_assignment } .
net_decl_assignment	: <net>identifier '=' expression .
function_declaration	: 'function' (+vlog2001 ['automatic'] ) 
			     [ range_or_type ]
			     <function>identifier ';'
			     function_item_declaration
			         { function_item_declaration }
			     statement
			  'endfunction'
			.
range_or_type		: range
			| 'integer'
			| 'real'
			| 'realtime'
			| 'time'
			.
function_item_declaration : block_item_declaration | input_declaration .
task_declaration	: 'task' (+vlog2001 ['automatic'] ) 
			     <task>identifier ';'
			     { task_item_declaration }
			     statement_or_null
			  'endtask'
			.
task_item_declaration	: block_item_declaration
			| input_declaration
			| output_declaration
			| inout_declaration
			.
block_item_declaration	: parameter_declaration
			| reg_declaration
			| integer_declaration
			| real_declaration
			| time_declaration
			| realtime_declaration
			| event_declaration
			.

gate_instantiation	: n_input_gatetype
			  [ drive_strength ] [ delay2 ]
			  n_input_gate_instance { ',' n_input_gate_instance }
			  ';'
			| n_output_gatetype
			  [ drive_strength ] [ delay2 ]
			  n_output_gate_instance { ',' n_output_gate_instance }
			  ';'
			| enable_gatetype
			  [ drive_strength ] [ delay3 ]
			  enable_gate_instance { ',' enable_gate_instance }
			  ';'
			| mos_switchtype
			  [ delay3 ]
			  mos_switch_instance { ',' mos_switch_instance }
			  ';'
			| pass_switchtype
			  pass_switch_instance { ',' pass_switch_instance }
			  ';'
			| pass_en_switchtype
			  [ delay3 ]
			  pass_en_switch_instance {',' pass_en_switch_instance}
			  ';'
			| cmos_switchtype
			  [ delay3 ]
			  cmos_switch_instance { ',' cmos_switch_instance }
			  ';'
			| 'pullup'
			  [ pullup_strength ]
			  pull_gate_instance { ',' pull_gate_instance }
			  ';'
			| 'pulldown'
			  [ pulldown_strength ]
			  pull_gate_instance { ',' pull_gate_instance }
			  ';'
			.
n_input_gate_instance	: [ name_of_gate_instance ] 
			  '(' output_terminal ','
			      input_terminal { ',' input_terminal }
			  ')'
			.
n_output_gate_instance	: [ name_of_gate_instance ] 
			  '(' output_terminal  { ',' output_terminal } ','
			      input_terminal
			  ')'
			.
enable_gate_instance	: [ name_of_gate_instance ] 
			  '(' output_terminal ',' input_terminal ','
			      enable_terminal
			  ')'
			.
mos_switch_instance	: [ name_of_gate_instance ] 
			  '(' output_terminal ',' input_terminal ','
			      enable_terminal
			  ')'
			.
pass_switch_instance	: [ name_of_gate_instance ] 
			  '(' inout_terminal ',' inout_terminal ')'
			.
pass_en_switch_instance	: [ name_of_gate_instance ] 
			  '(' inout_terminal ',' inout_terminal ','
			      enable_terminal
			  ')'
			.
cmos_switch_instance	: [ name_of_gate_instance ] 
			  '(' output_terminal ',' input_terminal ','
			      ncontrol_terminal ',' pcontrol_terminal
			  ')'
			.
pull_gate_instance	: [ name_of_gate_instance ] 
			  '(' output_terminal ')'
			.
name_of_gate_instance	: <gate_instance>identifier [range].

pullup_strength		: '(' strength0 ',' strength1 ')'
			| '(' strength1 ',' strength0 ')'
			| '(' strength1 ')'
			.
pulldown_strength	: '(' strength0 ',' strength1 ')'
			| '(' strength1 ',' strength0 ')'
			| '(' strength0 ')'
			.
input_terminal		: <scalar>expression .
enable_terminal		: <scalar>expression .
ncontrol_terminal	: <scalar>expression .
pcontrol_terminal	: <scalar>expression .
output_terminal		: <terminal>identifier
			| <terminal>identifier '[' constant_expression ']'
			.
inout_terminal		: <terminal>identifier
			| <terminal>identifier '[' constant_expression ']'
			.
n_input_gatetype	: 'and' | 'nand' | 'or' | 'nor' | 'xor' | 'xnor' .
n_output_gatetype	: 'buf' | 'not' .
enable_gatetype		: 'bufif0' | 'bufif1' | 'notif0' | 'notif1' .
mos_switchtype		: 'nmos' | 'pmos' | 'rnmos' | 'rpmos' .
pass_switchtype		: 'tran' | 'rtran' .
pass_en_switchtype	: 'tranif0' | 'tranif1' | 'rtranif0' | 'rtranif1' .
cmos_switchtype		: 'cmos' | 'rcmos' .

module_instantiation	: <module>identifier [ parameter_value_assignment ]
			   module_instance { ',' module_instance } ';'
			.
parameter_value_assignment : '#' '(' expression { ',' expression } ')' .
module_instance		: name_of_instance
			     '(' [ list_of_module_connections ] ')'
			.
name_of_instance	: <module_instance>identifier [ range ] .
list_of_module_connections : ordered_port_connection
			        { ',' ordered_port_connection }
			| named_port_connection { ',' named_port_connection }
			.
ordered_port_connection	: [ expression ] .
named_port_connection	: '.' <port>identifier '(' [ expression ] ')' .

udp_declaration		: 'primitive' <udp>identifier
			      '(' udp_port_list ')' ';'
			      udp_port_declaration { udp_port_declaration }
			      udp_body
			  'endprimitive'
			.
udp_port_list		: <output_port>identifier ','
			  <input_port>identifier { ',' <input_port>identifier }
			.
udp_port_declaration	: output_declaration
			| input_declaration
			| reg_declaration
			.
udp_body		: combinational_body | sequencial_body .
combinational_body	: 'table' combinational_entry { combinational_entry }
			  'endtable'
			.
combinational_entry	: level_input_list ':' output_symbol ';' .
sequencial_body		: [ udp_initial_statement ]
			  'table' sequencial_entry { sequencial_entry }
			  'endtable'
			.
udp_initial_statement	: 'initial' <udp_output_port>identifier
			  '=' init_val ';'
			.
init_val		: "1'b0" | "1'b1" | "1'bx" | "1'bX"
			| "1'B0" | "1'B1" | "1'Bx" | "1'BX"
			| '1' | '0'
			.
sequencial_entry	: seq_input_list ':' current_state ':' next_state ';' .
seq_input_list		: level_input_list | edge_input_list .
level_input_list	: level_symbol { level_symbol } .
edge_input_list		: { level_symbol } edge_indicator { level_symbol } .
edge_indicator		: '(' level_symbol level_symbol ')' | edge_symbol .
current_state		: level_symbol .
next_state		: output_symbol | '-' .
output_symbol		: '0' | '1' | 'x' | 'X' .
level_symbol		: '0' | '1' | 'x' | 'X' | '?' | 'b' | 'B' .
edge_symbol		: 'r' | 'R' | 'f' | 'F' | 'p' | 'P' | 'n' | 'N' | '*' .
udp_instantiation	: <udp>identifier
			    [ drive_strength ] [ delay2 ]
			    udp_instance { ',' udp_instance } ';'
			.
udp_instance		: [ name_of_udp_instance ]
			     '(' output_terminal ','
				 input_terminal { ',' input_terminal }
			     ')'
			.
name_of_udp_instance	: <udp_instance>identifier [ range ] .

continuous_assign	: 'assign' [ drive_strength ] [ delay3 ]
			   list_of_net_assignments ';'
			.
list_of_net_assignments	: net_assignment { ',' net_assignment } .
net_assignment		: net_lvalue '=' expression .
initial_construct	: 'initial' statement .
always_construct	: 'always' statement .
statement		: blocking_assignment ';'
			| non_blocking_assignment ';'
			| procedural_continuous_assignment ';'
			| procedural_timing_control_statement
			| conditional_statement
			| case_statement
			| loop_statement
			| wait_statement
			| disable_statement
			| event_trigger
			| seq_block
			| par_block
			| task_enable
			| system_task_enable
			.
statement_or_null	: statement | ';' .
blocking_assignment	: reg_lvalue '=' [delay_or_event_control] expression .
non_blocking_assignment	: reg_lvalue '<=' [delay_or_event_control] expression .
procedural_continuous_assignment :
			  'assign'   reg_assignment ';'
			| 'deassign' reg_lvalue ';'
			| 'force'    reg_assignment ';'
			| 'force'    net_assignment ';'
			| 'release'  reg_lvalue ';'
			| 'release'  net_lvalue ';'
			.
procedural_timing_control_statement : delay_or_event_control statement_or_null.
delay_or_event_control	: delay_control
			| event_control
			| 'repeat' '(' expression ')' event_control
			.
delay_control		: '#' delay_value
			| '#' '(' mintypmax_expression')'
			.
event_control		: '@' <event>identifier
			| '@' '(' event_expression ')'
			| (+vlog2001 '@' '*' )
			.
event_expression	: expression
			| <event>identifier
			| 'posedge' expression
			| 'negedge' expression
			| event_expression ',' event_expression
			| (+vlog2001 event_expression 'or' event_expression )
			.
conditional_statement	: 'if' '(' expression ')' statement_or_null
			  [ 'else' statement_or_null ]
			.
case_statement		: 'case' '(' expression ')'
			          case_item { case_item }
			  'endcase'
			| 'casez' '(' expression ')'
			          case_item { case_item }
			  'endcase'
			| 'casex' '(' expression ')'
			          case_item { case_item }
			  'endcase'
			.
case_item		: expression { ',' expression } ':' statement_or_null
			| 'default' [ ':' ] statement_or_null
			.
loop_statement		: 'forever' statement
			| 'repeat' '(' expression ')' statement
			| 'while' '(' expression ')' statement
			| 'for' '(' reg_assignment ';'
			            expression ';'
			            reg_assignment ')'
			      statement
			.
reg_assignment		: reg_lvalue '=' expression .
wait_statement		: 'wait' '(' expression ')' statement_or_null .
disable_statement	: 'disable' <task>identifier ';'
			| 'disable' <block>identifier ';'
			.
event_trigger		: '->' <event>identifier ';' .
seq_block		: 'begin' [ ':' <block>identifier
			                { block_item_declaration} ]
			       { statement }
			  'end'
			.
par_block		: 'fork' [ ':' <block>identifier
			                { block_item_declaration} ]
			       { statement }
			  'join'
			.
task_enable		: <task>identifier
			     [ '(' expression { ',' expression } ')' ] ';'
			.
system_task_enable	: system_task_name 
			     [ '(' expression { ',' expression } ')' ] ';'
			.
system_task_name	: '$' identifier .

specify_block		: 'specify' { specify_item } 'endspecify' .
specify_item		: specparam_declaration
			| path_declaration
			| system_timing_check
			.
specparam_declaration	: 'specparam' list_of_specparam_assignments ';' .
list_of_specparam_assignments : specparam_assignment
			         { ',' specparam_assignment }
			.
specparam_assignment	: <specparam>identifier '=' constant_expression
			| pulse_control_specparam
			.
pulse_control_specparam	: 'PATHPULSE$'
			     '=' '(' <reject>limit_value
			     [ ',' <error>limit_value ] ')' ';'
			| 'PATHPULSE$' specify_input_terminal_descriptor
			     '$' specify_output_terminal_descriptor
			     '=' '(' <reject>limit_value
			     [ ',' <error>limit_value ] ')' ';'
			.
limit_value		: constant_mintypmax_expression .
path_declaration	: simple_path_declaration
			| edge_sensitive_path_declaration
			| state_dependent_path_declaration
			.
simple_path_declaration	: parallel_path_description '=' path_delay_value
			| full_path_description '=' path_delay_value
			.
parallel_path_description : '(' specify_input_terminal_descriptor
			        [ polarity_operator ]
			        '=>' specify_output_terminal_descriptor ')'
			.
full_path_description	: '(' list_of_path_inputs
			      [ polarity_operator ]
			      '*>' list_of_path_outputs ')'
			.
list_of_path_inputs	: specify_input_terminal_descriptor
			  { ',' specify_input_terminal_descriptor }
			.
list_of_path_outputs	: specify_output_terminal_descriptor
			  { ',' specify_output_terminal_descriptor }
			.
specify_input_terminal_descriptor :
			  input_identifier
			| input_identifier '[' constant_expression ']'
			| input_identifier '[' <msb>constant_expression
					   ':' <lsb>constant_expression ']'
			.
specify_output_terminal_descriptor :
			  output_identifier
			| output_identifier '[' constant_expression ']'
			| output_identifier '[' <msb>constant_expression
					   ':' <lsb>constant_expression ']'
			.
input_identifier	: <input_port>identifier | <inout_port>identifier .
output_identifier	: <output_port>identifier | <inout_port>identifier .
polarity_operator	: '+' | '-' .
path_delay_value	: list_of_path_delay_expressions
			| '(' list_of_path_delay_expressions ')'
			.
list_of_path_delay_expressions : 
			  <t>path_delay_expression
			| <trise>path_delay_expression
			  ',' <tfall>path_delay_expression
			| <trise>path_delay_expression
			  ',' <tfall>path_delay_expression
			  ',' <tz>path_delay_expression
			| <t01>path_delay_expression
			  ',' <t10>path_delay_expression
			  ',' <t0z>path_delay_expression
			  ',' <tz1>path_delay_expression
			  ',' <t1z>path_delay_expression
			  ',' <tz0>path_delay_expression
			| <t01>path_delay_expression
			  ',' <t10>path_delay_expression
			  ',' <t0z>path_delay_expression
			  ',' <tz1>path_delay_expression
			  ',' <t1z>path_delay_expression
			  ',' <tz0>path_delay_expression
			  ',' <t0x>path_delay_expression
			  ',' <tx1>path_delay_expression
			  ',' <t1x>path_delay_expression
			  ',' <tx0>path_delay_expression
			  ',' <txz>path_delay_expression
			  ',' <tzx>path_delay_expression
			.
path_delay_expression	: constant_mintypmax_expression .
edge_sensitive_path_declaration :
			  parallel_edge_sensitive_path_description
			    '=' path_delay_value
			| full_edge_sensitive_path_description
			    '=' path_delay_value
			.
parallel_edge_sensitive_path_description : 
			  '(' [ edge_identifier ]
			      specify_input_terminal_descriptor
			      '=>' specify_output_terminal_descriptor
			      [ polarity_operator ]
			      ':' data_source_expression
		          ')'
			.
full_edge_sensitive_path_description :
			  '(' [ edge_identifier ]
			      list_of_path_inputs
			      '*>' list_of_path_outputs
			      [ polarity_operator ]
			      ':' data_source_expression
		          ')'
			.
data_source_expression	: expression .
edge_identifier		: 'posedge' | 'negedge' .
state_dependent_path_declaration :
			  'if' '(' <conditional>expression ')'
			       simple_path_declaration
			| 'if' '(' <conditional>expression ')'
			       edge_sensitive_path_declaration
			| 'ifnone' simple_path_declaration
			.
system_timing_check	: '$setup' '('
			     timing_check_event
			     ',' timing_check_event
			     ',' timing_check_limit
			     [ ',' notify_register ]
			  ')' ';'
			| '$hold' '('
			     timing_check_event
			     ',' timing_check_event
			     ',' timing_check_limit
			     [ ',' notify_register ]
			  ')' ';'
			| '$period' '('
			     controlled_timing_check_event
			     ',' timing_check_limit
			     [ ',' notify_register ]
			  ')' ';'
			| '$width' '('
			     controlled_timing_check_event
			     ',' timing_check_limit
			     ',' constant_expression
			     [ ',' notify_register ]
			  ')' ';'
			| '$skew' '('
			     timing_check_event
			     ',' timing_check_event
			     ',' timing_check_limit
			     [ ',' notify_register ]
			  ')' ';'
			| '$recovery' '('
			     controlled_timing_check_event
			     ',' timing_check_event
			     ',' timing_check_limit
			     [ ',' notify_register ]
			  ')' ';'
			| '$setuphold' '('
			     timing_check_event
			     ',' timing_check_event
			     ',' timing_check_limit
			     ',' timing_check_limit
			     [ ',' notify_register ]
			  ')' ';'
			.
timing_check_event	: [ timing_check_event_control ]
			  specify_terminal_descriptor
			  [ '&&&' timing_check_condition ]
			.
specify_terminal_descriptor : specify_input_terminal_descriptor
			| specify_output_terminal_descriptor
			.
controlled_timing_check_event :
			  timing_check_event_control
			  specify_terminal_descriptor
			  [ '&&&' timing_check_condition ]
			.
timing_check_event_control : 'posedge' | 'negedge' | edge_control_specifier .
edge_control_specifier	: 'edge' '[' edge_descriptor
			             [ ',' edge_descriptor ]
				 ']'
			.
edge_descriptor		: '01' | '10' | '0x' | 'x1' | '1x' | 'x0' .
timing_check_condition	: scalar_timing_check_condition
			| '(' scalar_timing_check_condition ')'
			.
scalar_timing_check_condition :
			  expression
			| '~' expression
			| expression '==' scalar_constant
			| expression '===' scalar_constant
			| expression '!=' scalar_constant
			| expression '!==' scalar_constant
			.
timing_check_limit	: expression .
scalar_constant		: "1'b0" | "1'b1" | "1'B0" | "1'B1"
			| "'b0" | "'b1" | "'B0" | "'B1"
			| '1' | '0'
			.
notify_register		: <register>identifier .

net_lvalue		: <net>identifier
			| <net>identifier '[' expression ']'
			| <net>identifier '[' <msb>constant_expression
				          ':' <lsb>constant_expression ']'
			| <net>concatenation
			.
reg_lvalue		: <reg>identifier
			| <reg>identifier '[' expression ']'
			| <reg>identifier '[' <msb>constant_expression
				          ':' <lsb>constant_expression ']'
			| <reg>concatenation
			.
constant_expression	: constant_primary
			| unary_operator constant_primary
			| constant_expression
			  binary_operator
			  constant_expression
			| constant_expression '?'
			  constant_expression ':' constant_expression
			| string
			.
constant_primary	: number
			| <parameter>identifier
			| <constant>concatenation
			| <constant>multiple_concatenation
			.
constant_mintypmax_expression :
			  constant_expression
			| constant_expression ':'
			  constant_expression ':' constant_expression
			.
mintypmax_expression	: expression
			| expression ':' expression ':' expression
			.
expression		: primary
			| unary_operator primary
			| expression binary_operator expression
			| expression '?' expression ':' expression
			| string
			.
unary_operator		: '+'
			| '-'
			| '!'
			| '~'
			| '&'
			| '~&'
			| '|'
			| '~|'
			| '^'
			| '~^'
			| '^~'
			.
binary_operator		: '+'
			| '-'
			| '*'
			| '/'
			| '%'
			| '=='
			| '!='
			| '==='
			| '!=='
			| '&&'
			| '||'
			| '<'
			| '<='
			| '>'
			| '>='
			| '&'
			| '|'
			| '^'
			| '^~'
			| '~^'
			| '>>'
			| '<<'
			| (+vlog2001 '**' )
			| (+vlog2001 '>>>' )
			| (+vlog2001 '<<<' )
			.
primary			: number
			| identifier
			| identifier '[' expression ']'
			| identifier '[' <msb>constant_expression
			                 ':' <lsb>constant_expression
			             ']'
			| concatenation
			| multiple_concatenation
			| function_call
			| '(' mintypmax_expression ')'
			.
number			: decimal_number
			| octal_number
			| binary_number
			| hex_number
			| real_number
			.
real_number		: [sign] unsigned_number '.' unsigned_number
			| [sign] unsigned_number [ '.' unsigned_number ]
			         'e' [sign] unsigned_number
			| [sign] unsigned_number [ '.' unsigned_number ]
			         'E' [sign] unsigned_number
			.
decimal_number		: [sign] unsigned_number
			| [size] decimal_base unsigned_number
			| (+vlog2001 [size] signed_decimal_base unsigned_number )
			.
binary_number		: [size] binary_base binary_digit {'_'|binary_digit} 
			| (+vlog2001 [size] signed_binary_base binary_digit {'_'|binary_digit}  )
			.
octal_number		: [size] octal_base  octal_digit  {'_'|octal_digit}
			| (+vlog2001 [size] signed_octal_base  octal_digit  {'_'|octal_digit} )
			.
hex_number		: [size] hex_base    hex_digit    {'_'|hex_digit}
			| (+vlog2001 [size] signed_hex_base    hex_digit    {'_'|hex_digit} )
			.
sign			: '+' | '-' .
size			: unsigned_number .
unsigned_number		: decimal_digit {'_'|decimal_digit} .
decimal_base		: "'d" | "'D" .
binary_base		: "'b" | "'B" .
octal_base		: "'o" | "'O" .
hex_base		: "'h" | "'H" .
signed_decimal_base	: "'sd" | "'SD" | "'sD" | "'Sd".
signed_binary_base	: "'sb" | "'SB" | "'sB" | "'Sb".
signed_octal_base	: "'so" | "'SO" | "'sO" | "'So".
signed_hex_base		: "'sh" | "'SH" | "'sH" | "'Sh".
decimal_digit		: '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9' .
binary_digit		: 'x'|'X'|'z'|'Z'|'0'|'1' .
octal_digit		: 'x'|'X'|'z'|'Z'|'0'|'1'|'2'|'3'|'4'|'5'|'6'|'7' .
hex_digit		: 'x'|'X'|'z'|'Z'
			| '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
			| 'a'|'b'|'c'|'d'|'e'|'f'|'A'|'B'|'C'|'D'|'E'|'F'
			.
concatenation		: '{' expression { ',' expression } '}' .
multiple_concatenation	: '{' expression '{' expression {',' expression} '}'
			  '}'
			.
function_call		: <function>identifier
			    '(' expression { ',' expression } ')'
			| name_of_system_function
			    [ '(' expression { ',' expression } ')' ]
			.
name_of_system_function	: '$' identifier .
string			: '"' ANY_CHAR_EXCEPT_NEWLINE '"' .
comment			: short_comment | long_comment .
short_comment		: '//' COMMENT_TEXT NEWLINE .
long_comment		: '/*' COMMENT_TEXT '*/' .
identifier		: single_identifier { '.' single_identifier } .
single_identifier	: simple_identifier | escaped_identifier .
simple_identifier	: ALPHA { ALPHANUM | '_' | '$' } .
escaped_identifier	: '\' { ANY_CHAR_EXCEPT_WHITESPACE } WHITESPACE .

